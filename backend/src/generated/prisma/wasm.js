
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProveedorScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  direccion: 'direccion',
  telefono: 'telefono'
};

exports.Prisma.MedicamentoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  principioActivo: 'principioActivo',
  laboratorio: 'laboratorio',
  proveedorId: 'proveedorId',
  fechaVencimiento: 'fechaVencimiento',
  formaFarmaceutica: 'formaFarmaceutica',
  presentacion: 'presentacion',
  lote: 'lote',
  alertaStock: 'alertaStock'
};

exports.Prisma.DevolucionScalarFieldEnum = {
  id: 'id',
  medicamentoId: 'medicamentoId',
  fecha: 'fecha',
  cantidad: 'cantidad',
  motivo: 'motivo'
};

exports.Prisma.InventarioScalarFieldEnum = {
  id: 'id',
  medicamentoId: 'medicamentoId',
  fecha: 'fecha',
  cantidad: 'cantidad'
};

exports.Prisma.RecetaScalarFieldEnum = {
  id: 'id',
  pacienteNombre: 'pacienteNombre',
  medicoNombre: 'medicoNombre',
  fecha: 'fecha'
};

exports.Prisma.RecetaMedicamentoScalarFieldEnum = {
  id: 'id',
  recetaId: 'recetaId',
  medicamentoId: 'medicamentoId',
  cantidad: 'cantidad',
  estado: 'estado'
};

exports.Prisma.VentaScalarFieldEnum = {
  id: 'id',
  fecha: 'fecha',
  clienteId: 'clienteId',
  usuarioId: 'usuarioId',
  total: 'total',
  formaPago: 'formaPago'
};

exports.Prisma.VentaMedicamentoScalarFieldEnum = {
  id: 'id',
  ventaId: 'ventaId',
  medicamentoId: 'medicamentoId',
  cantidad: 'cantidad',
  precioUnitario: 'precioUnitario'
};

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  email: 'email',
  clave: 'clave',
  perfil: 'perfil',
  activo: 'activo'
};

exports.Prisma.ClienteScalarFieldEnum = {
  id: 'id',
  email: 'email',
  nombre: 'nombre',
  suscripto: 'suscripto'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.ProveedorOrderByRelevanceFieldEnum = {
  nombre: 'nombre',
  direccion: 'direccion'
};

exports.Prisma.MedicamentoOrderByRelevanceFieldEnum = {
  nombre: 'nombre',
  principioActivo: 'principioActivo',
  laboratorio: 'laboratorio',
  lote: 'lote'
};

exports.Prisma.DevolucionOrderByRelevanceFieldEnum = {
  motivo: 'motivo'
};

exports.Prisma.RecetaOrderByRelevanceFieldEnum = {
  pacienteNombre: 'pacienteNombre',
  medicoNombre: 'medicoNombre'
};

exports.Prisma.UsuarioOrderByRelevanceFieldEnum = {
  nombre: 'nombre',
  email: 'email',
  clave: 'clave'
};

exports.Prisma.ClienteOrderByRelevanceFieldEnum = {
  email: 'email',
  nombre: 'nombre'
};
exports.FormaFarmaceutica = exports.$Enums.FormaFarmaceutica = {
  comprimido: 'comprimido',
  solucion: 'solucion'
};

exports.Presentacion = exports.$Enums.Presentacion = {
  caja5: 'caja5',
  caja10: 'caja10',
  solucion50: 'solucion50',
  solucion80: 'solucion80'
};

exports.Estado = exports.$Enums.Estado = {
  pendiente: 'pendiente',
  recibido: 'recibido'
};

exports.FormaPago = exports.$Enums.FormaPago = {
  efectivo: 'efectivo',
  tarjeta: 'tarjeta'
};

exports.Perfil = exports.$Enums.Perfil = {
  farmaceutico: 'farmaceutico',
  administrativo: 'administrativo'
};

exports.Prisma.ModelName = {
  Proveedor: 'Proveedor',
  Medicamento: 'Medicamento',
  Devolucion: 'Devolucion',
  Inventario: 'Inventario',
  Receta: 'Receta',
  RecetaMedicamento: 'RecetaMedicamento',
  Venta: 'Venta',
  VentaMedicamento: 'VentaMedicamento',
  Usuario: 'Usuario',
  Cliente: 'Cliente'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
